package clustertemplates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new clustertemplates API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for clustertemplates API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
DeleteClusterTemplate deletes cluster template by id

Cluster templates are stored cluster configurations, which configurations are reusable any time
*/
func (a *Client) DeleteClusterTemplate(params *DeleteClusterTemplateParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterTemplateParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "deleteClusterTemplate",
		Method:             "DELETE",
		PathPattern:        "/clustertemplates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteClusterTemplateReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
DeletePrivateClusterTemplate deletes private cluster template by name

Cluster templates are stored cluster configurations, which configurations are reusable any time
*/
func (a *Client) DeletePrivateClusterTemplate(params *DeletePrivateClusterTemplateParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePrivateClusterTemplateParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "deletePrivateClusterTemplate",
		Method:             "DELETE",
		PathPattern:        "/clustertemplates/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePrivateClusterTemplateReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
DeletePublicClusterTemplate deletes public owned or private cluster template by name

Cluster templates are stored cluster configurations, which configurations are reusable any time
*/
func (a *Client) DeletePublicClusterTemplate(params *DeletePublicClusterTemplateParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePublicClusterTemplateParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "deletePublicClusterTemplate",
		Method:             "DELETE",
		PathPattern:        "/clustertemplates/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePublicClusterTemplateReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
GetClusterTemplate retrieves cluster template by id

Cluster templates are stored cluster configurations, which configurations are reusable any time
*/
func (a *Client) GetClusterTemplate(params *GetClusterTemplateParams) (*GetClusterTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterTemplateParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getClusterTemplate",
		Method:             "GET",
		PathPattern:        "/clustertemplates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetClusterTemplateReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterTemplateOK), nil
}

/*
GetPrivateClusterTemplate retrieves a private cluster template by name

Cluster templates are stored cluster configurations, which configurations are reusable any time
*/
func (a *Client) GetPrivateClusterTemplate(params *GetPrivateClusterTemplateParams) (*GetPrivateClusterTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateClusterTemplateParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getPrivateClusterTemplate",
		Method:             "GET",
		PathPattern:        "/clustertemplates/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPrivateClusterTemplateReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateClusterTemplateOK), nil
}

/*
GetPrivatesClusterTemplate retrieves private cluster templates

Cluster templates are stored cluster configurations, which configurations are reusable any time
*/
func (a *Client) GetPrivatesClusterTemplate(params *GetPrivatesClusterTemplateParams) (*GetPrivatesClusterTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivatesClusterTemplateParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getPrivatesClusterTemplate",
		Method:             "GET",
		PathPattern:        "/clustertemplates/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPrivatesClusterTemplateReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivatesClusterTemplateOK), nil
}

/*
GetPublicClusterTemplate retrieves a public or private owned cluster template by name

Cluster templates are stored cluster configurations, which configurations are reusable any time
*/
func (a *Client) GetPublicClusterTemplate(params *GetPublicClusterTemplateParams) (*GetPublicClusterTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicClusterTemplateParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getPublicClusterTemplate",
		Method:             "GET",
		PathPattern:        "/clustertemplates/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPublicClusterTemplateReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicClusterTemplateOK), nil
}

/*
GetPublicsClusterTemplate retrieves public and private owned cluster template

Cluster templates are stored cluster configurations, which configurations are reusable any time
*/
func (a *Client) GetPublicsClusterTemplate(params *GetPublicsClusterTemplateParams) (*GetPublicsClusterTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicsClusterTemplateParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getPublicsClusterTemplate",
		Method:             "GET",
		PathPattern:        "/clustertemplates/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPublicsClusterTemplateReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicsClusterTemplateOK), nil
}

/*
PostPrivateClusterTemplate creates cluster template as private resource

Cluster templates are stored cluster configurations, which configurations are reusable any time
*/
func (a *Client) PostPrivateClusterTemplate(params *PostPrivateClusterTemplateParams) (*PostPrivateClusterTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPrivateClusterTemplateParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "postPrivateClusterTemplate",
		Method:             "POST",
		PathPattern:        "/clustertemplates/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPrivateClusterTemplateReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPrivateClusterTemplateOK), nil
}

/*
PostPublicClusterTemplate creates cluster template as public resource

Cluster templates are stored cluster configurations, which configurations are reusable any time
*/
func (a *Client) PostPublicClusterTemplate(params *PostPublicClusterTemplateParams) (*PostPublicClusterTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPublicClusterTemplateParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "postPublicClusterTemplate",
		Method:             "POST",
		PathPattern:        "/clustertemplates/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPublicClusterTemplateReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPublicClusterTemplateOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}
