// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountPreferencesResponse account preferences response
// swagger:model AccountPreferencesResponse

type AccountPreferencesResponse struct {

	// default tags for the resources created
	DefaultTags map[string]string `json:"defaultTags,omitempty"`

	// list of the cloudplatforms visible on the UI
	Platforms string `json:"platforms,omitempty"`

	// smartsense enabled on the UI
	SmartsenseEnabled *bool `json:"smartsenseEnabled,omitempty"`

	// supported external databases
	// Unique: true
	SupportedExternalDatabases []*SupportedExternalDatabaseServiceEntryResponse `json:"supportedExternalDatabases"`
}

/* polymorph AccountPreferencesResponse defaultTags false */

/* polymorph AccountPreferencesResponse platforms false */

/* polymorph AccountPreferencesResponse smartsenseEnabled false */

/* polymorph AccountPreferencesResponse supportedExternalDatabases false */

// Validate validates this account preferences response
func (m *AccountPreferencesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSupportedExternalDatabases(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountPreferencesResponse) validateSupportedExternalDatabases(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportedExternalDatabases) { // not required
		return nil
	}

	if err := validate.UniqueItems("supportedExternalDatabases", "body", m.SupportedExternalDatabases); err != nil {
		return err
	}

	for i := 0; i < len(m.SupportedExternalDatabases); i++ {

		if swag.IsZero(m.SupportedExternalDatabases[i]) { // not required
			continue
		}

		if m.SupportedExternalDatabases[i] != nil {

			if err := m.SupportedExternalDatabases[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("supportedExternalDatabases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountPreferencesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountPreferencesResponse) UnmarshalBinary(b []byte) error {
	var res AccountPreferencesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
