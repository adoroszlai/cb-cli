package templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new templates API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for templates API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
DeletePrivateTemplate deletes private template by name

A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.
*/
func (a *Client) DeletePrivateTemplate(params *DeletePrivateTemplateParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePrivateTemplateParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "deletePrivateTemplate",
		Method:             "DELETE",
		PathPattern:        "/templates/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePrivateTemplateReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
DeletePublicTemplate deletes public owned or private template by name

A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.
*/
func (a *Client) DeletePublicTemplate(params *DeletePublicTemplateParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePublicTemplateParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "deletePublicTemplate",
		Method:             "DELETE",
		PathPattern:        "/templates/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePublicTemplateReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
DeleteTemplate deletes template by id

A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.
*/
func (a *Client) DeleteTemplate(params *DeleteTemplateParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTemplateParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "deleteTemplate",
		Method:             "DELETE",
		PathPattern:        "/templates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTemplateReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
GetPrivateTemplate retrieves a private template by name

A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.
*/
func (a *Client) GetPrivateTemplate(params *GetPrivateTemplateParams) (*GetPrivateTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateTemplateParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getPrivateTemplate",
		Method:             "GET",
		PathPattern:        "/templates/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPrivateTemplateReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateTemplateOK), nil
}

/*
GetPrivatesTemplate retrieves private templates

A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.
*/
func (a *Client) GetPrivatesTemplate(params *GetPrivatesTemplateParams) (*GetPrivatesTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivatesTemplateParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getPrivatesTemplate",
		Method:             "GET",
		PathPattern:        "/templates/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPrivatesTemplateReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivatesTemplateOK), nil
}

/*
GetPublicTemplate retrieves a public or private owned template by name

A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.
*/
func (a *Client) GetPublicTemplate(params *GetPublicTemplateParams) (*GetPublicTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicTemplateParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getPublicTemplate",
		Method:             "GET",
		PathPattern:        "/templates/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPublicTemplateReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicTemplateOK), nil
}

/*
GetPublicsTemplate retrieves public and private owned templates

A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.
*/
func (a *Client) GetPublicsTemplate(params *GetPublicsTemplateParams) (*GetPublicsTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicsTemplateParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getPublicsTemplate",
		Method:             "GET",
		PathPattern:        "/templates/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPublicsTemplateReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicsTemplateOK), nil
}

/*
GetTemplate retrieves template by id

A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.
*/
func (a *Client) GetTemplate(params *GetTemplateParams) (*GetTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplateParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getTemplate",
		Method:             "GET",
		PathPattern:        "/templates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTemplateReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTemplateOK), nil
}

/*
PostPrivateTemplate creates template as private resource

A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.
*/
func (a *Client) PostPrivateTemplate(params *PostPrivateTemplateParams) (*PostPrivateTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPrivateTemplateParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "postPrivateTemplate",
		Method:             "POST",
		PathPattern:        "/templates/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPrivateTemplateReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPrivateTemplateOK), nil
}

/*
PostPublicTemplate creates template as public resource

A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.
*/
func (a *Client) PostPublicTemplate(params *PostPublicTemplateParams) (*PostPublicTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPublicTemplateParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "postPublicTemplate",
		Method:             "POST",
		PathPattern:        "/templates/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPublicTemplateReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPublicTemplateOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}
