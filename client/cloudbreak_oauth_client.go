package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	httptransport "github.com/go-swagger/go-swagger/httpkit/client"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"net/http"
	"crypto/tls"
	"net"
	"time"
)

// This is nearly identical with http.DefaultTransport
var TransportConfig = &http.Transport{
	Proxy: http.ProxyFromEnvironment,
	TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	Dial: (&net.Dialer{
		Timeout:   30 * time.Second,
		KeepAlive: 30 * time.Second,
	}).Dial,
	TLSHandshakeTimeout: 10 * time.Second,
	ExpectContinueTimeout: 1 * time.Second,
}

// Default cloudbreak HTTP client.
var DefaultOAuth2 = NewOAuth2HTTPClient(nil)

// NewHTTPClient creates a new cloudbreak HTTP client.
func NewOAuth2HTTPClient(formats strfmt.Registry) *Cloudbreak {
	if formats == nil {
		formats = strfmt.Default
	}
	transport := httptransport.New("192.168.99.100", "/cb/api/v1", []string{"https"})

	token := GetToken("https://192.168.99.100/identity/oauth/authorize", "admin@example.com", "cloudbreak", "cloudbreak_shell")
	transport.DefaultAuthentication = httptransport.BearerToken(token)

	transport.Transport = TransportConfig
	return New(transport, formats)
}
