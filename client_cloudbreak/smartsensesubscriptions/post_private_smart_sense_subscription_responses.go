package smartsensesubscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/hortonworks/hdc-cli/models_cloudbreak"
)

// PostPrivateSmartSenseSubscriptionReader is a Reader for the PostPrivateSmartSenseSubscription structure.
type PostPrivateSmartSenseSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *PostPrivateSmartSenseSubscriptionReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostPrivateSmartSenseSubscriptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, client.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostPrivateSmartSenseSubscriptionOK creates a PostPrivateSmartSenseSubscriptionOK with default headers values
func NewPostPrivateSmartSenseSubscriptionOK() *PostPrivateSmartSenseSubscriptionOK {
	return &PostPrivateSmartSenseSubscriptionOK{}
}

/*PostPrivateSmartSenseSubscriptionOK handles this case with default header values.

successful operation
*/
type PostPrivateSmartSenseSubscriptionOK struct {
	Payload *models_cloudbreak.SmartSenseSubscriptionJSON
}

func (o *PostPrivateSmartSenseSubscriptionOK) Error() string {
	return fmt.Sprintf("[POST /smartsensesubscriptions/user][%d] postPrivateSmartSenseSubscriptionOK  %+v", 200, o.Payload)
}

func (o *PostPrivateSmartSenseSubscriptionOK) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models_cloudbreak.SmartSenseSubscriptionJSON)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
