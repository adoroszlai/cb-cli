package usages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new usages API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for usages API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
GetAccountUsage retrieves public and private owned usages by filter parameters

Cloudbreak gives you an up to date overview of cluster usage based on different filtering criteria (start/end date, users, providers, region, etc)
*/
func (a *Client) GetAccountUsage(params *GetAccountUsageParams) (*GetAccountUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountUsageParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getAccountUsage",
		Method:             "GET",
		PathPattern:        "/usages/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAccountUsageReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountUsageOK), nil
}

/*
GetDeployerUsage retrieves usages by filter parameters

Cloudbreak gives you an up to date overview of cluster usage based on different filtering criteria (start/end date, users, providers, region, etc)
*/
func (a *Client) GetDeployerUsage(params *GetDeployerUsageParams) (*GetDeployerUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeployerUsageParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getDeployerUsage",
		Method:             "GET",
		PathPattern:        "/usages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDeployerUsageReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeployerUsageOK), nil
}

/*
GetUserUsage retrieves private usages by filter parameters

Cloudbreak gives you an up to date overview of cluster usage based on different filtering criteria (start/end date, users, providers, region, etc)
*/
func (a *Client) GetUserUsage(params *GetUserUsageParams) (*GetUserUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserUsageParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getUserUsage",
		Method:             "GET",
		PathPattern:        "/usages/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUserUsageReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserUsageOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}
