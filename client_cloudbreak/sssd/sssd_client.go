package sssd

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new sssd API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sssd API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
DeletePrivateSssd deletes private s s s d config by name

SSSD configs are defining external user database configuration for provisioned clusters.
*/
func (a *Client) DeletePrivateSssd(params *DeletePrivateSssdParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePrivateSssdParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "deletePrivateSssd",
		Method:             "DELETE",
		PathPattern:        "/sssd/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePrivateSssdReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
DeletePublicSssd deletes public owned or private s s s d config by name

SSSD configs are defining external user database configuration for provisioned clusters.
*/
func (a *Client) DeletePublicSssd(params *DeletePublicSssdParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePublicSssdParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "deletePublicSssd",
		Method:             "DELETE",
		PathPattern:        "/sssd/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePublicSssdReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
DeleteSssd deletes s s s d config by id

SSSD configs are defining external user database configuration for provisioned clusters.
*/
func (a *Client) DeleteSssd(params *DeleteSssdParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSssdParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "deleteSssd",
		Method:             "DELETE",
		PathPattern:        "/sssd/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSssdReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
GetPrivateSssd retrieves a private s s s d config by name

SSSD configs are defining external user database configuration for provisioned clusters.
*/
func (a *Client) GetPrivateSssd(params *GetPrivateSssdParams) (*GetPrivateSssdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateSssdParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getPrivateSssd",
		Method:             "GET",
		PathPattern:        "/sssd/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPrivateSssdReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateSssdOK), nil
}

/*
GetPrivatesSssd retrieves private s s s d configs

SSSD configs are defining external user database configuration for provisioned clusters.
*/
func (a *Client) GetPrivatesSssd(params *GetPrivatesSssdParams) (*GetPrivatesSssdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivatesSssdParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getPrivatesSssd",
		Method:             "GET",
		PathPattern:        "/sssd/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPrivatesSssdReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivatesSssdOK), nil
}

/*
GetPublicSssd retrieves a public or private owned s s s d config by name

SSSD configs are defining external user database configuration for provisioned clusters.
*/
func (a *Client) GetPublicSssd(params *GetPublicSssdParams) (*GetPublicSssdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicSssdParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getPublicSssd",
		Method:             "GET",
		PathPattern:        "/sssd/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPublicSssdReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicSssdOK), nil
}

/*
GetPublicsSssd retrieves public and private owned s s s d configs

SSSD configs are defining external user database configuration for provisioned clusters.
*/
func (a *Client) GetPublicsSssd(params *GetPublicsSssdParams) (*GetPublicsSssdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicsSssdParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getPublicsSssd",
		Method:             "GET",
		PathPattern:        "/sssd/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPublicsSssdReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicsSssdOK), nil
}

/*
GetSssd retrieves s s s d config by id

SSSD configs are defining external user database configuration for provisioned clusters.
*/
func (a *Client) GetSssd(params *GetSssdParams) (*GetSssdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSssdParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getSssd",
		Method:             "GET",
		PathPattern:        "/sssd/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSssdReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSssdOK), nil
}

/*
PostPrivateSssd creates s s s d config as private resource

SSSD configs are defining external user database configuration for provisioned clusters.
*/
func (a *Client) PostPrivateSssd(params *PostPrivateSssdParams) (*PostPrivateSssdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPrivateSssdParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "postPrivateSssd",
		Method:             "POST",
		PathPattern:        "/sssd/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPrivateSssdReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPrivateSssdOK), nil
}

/*
PostPublicSssd creates s s s d config as public resource

SSSD configs are defining external user database configuration for provisioned clusters.
*/
func (a *Client) PostPublicSssd(params *PostPublicSssdParams) (*PostPublicSssdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPublicSssdParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "postPublicSssd",
		Method:             "POST",
		PathPattern:        "/sssd/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPublicSssdReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPublicSssdOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}
