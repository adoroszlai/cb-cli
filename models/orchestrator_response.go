package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*OrchestratorResponse orchestrator response

swagger:model OrchestratorResponse
*/
type OrchestratorResponse struct {

	/* endpoint for the container orchestration api

	Required: true
	*/
	APIEndpoint string `json:"apiEndpoint"`

	/* orchestrator specific parameters, like authentication details

	Required: true
	*/
	Parameters map[string]interface{} `json:"parameters"`

	/* type of the orchestrator (Swarm or Marathon)

	Required: true
	*/
	Type string `json:"type"`
}

// Validate validates this orchestrator response
func (m *OrchestratorResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIEndpoint(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrchestratorResponse) validateAPIEndpoint(formats strfmt.Registry) error {

	if err := validate.RequiredString("apiEndpoint", "body", string(m.APIEndpoint)); err != nil {
		return err
	}

	return nil
}

func (m *OrchestratorResponse) validateParameters(formats strfmt.Registry) error {

	if err := validate.Required("parameters", "body", m.Parameters); err != nil {
		return err
	}

	return nil
}

func (m *OrchestratorResponse) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}
