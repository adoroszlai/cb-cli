// Code generated by go-swagger; DO NOT EDIT.

package connectors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/hortonworks/hdc-cli/models_cloudbreak"
)

// GetPlatformSShKeysReader is a Reader for the GetPlatformSShKeys structure.
type GetPlatformSShKeysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPlatformSShKeysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetPlatformSShKeysOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPlatformSShKeysOK creates a GetPlatformSShKeysOK with default headers values
func NewGetPlatformSShKeysOK() *GetPlatformSShKeysOK {
	return &GetPlatformSShKeysOK{}
}

/*GetPlatformSShKeysOK handles this case with default header values.

successful operation
*/
type GetPlatformSShKeysOK struct {
	Payload GetPlatformSShKeysOKBody
}

func (o *GetPlatformSShKeysOK) Error() string {
	return fmt.Sprintf("[POST /connectors/sshkeys][%d] getPlatformSShKeysOK  %+v", 200, o.Payload)
}

func (o *GetPlatformSShKeysOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetPlatformSShKeysOKBody get platform s sh keys o k body
swagger:model GetPlatformSShKeysOKBody
*/
type GetPlatformSShKeysOKBody map[string][]models_cloudbreak.PlatformSSHKeyResponse

// Validate validates this get platform s sh keys o k body
func (o GetPlatformSShKeysOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := validate.Required("getPlatformSShKeysOK", "body", o); err != nil {
		return err
	}

	for k := range o {

		if err := validate.Required("getPlatformSShKeysOK"+"."+k, "body", o[k]); err != nil {
			return err
		}

		if err := validate.UniqueItems("getPlatformSShKeysOK"+"."+k, "body", o[k]); err != nil {
			return err
		}

		for i := 0; i < len(o[k]); i++ {

			if swag.IsZero(o[k][i]) { // not required
				continue
			}

			//if o[k][i] != nil {

				if err := o[k][i].Validate(formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("getPlatformSShKeysOK" + "." + k + "." + strconv.Itoa(i))
					}
					return err
				}
			//}

		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
