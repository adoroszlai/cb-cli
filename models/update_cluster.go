package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*UpdateCluster update cluster

swagger:model UpdateCluster
*/
type UpdateCluster struct {

	/* ambari stack details
	 */
	AmbariStackDetails *AmbariStackDetails `json:"ambariStackDetails,omitempty"`

	/* id of the referenced blueprint
	 */
	BlueprintID *int64 `json:"blueprintId,omitempty"`

	/* host group adjustment

	Required: true
	*/
	HostGroupAdjustment *HostGroupAdjustment `json:"hostGroupAdjustment"`

	/* hostgroups

	Unique: true
	*/
	Hostgroups []*HostGroup `json:"hostgroups,omitempty"`

	// TODO must be a pointer !
	/* status

	Required: true
	*/
	Status *string `json:"status"`

	/* user name password json

	Required: true
	*/
	UserNamePasswordJSON *UserNamePasswordJSON `json:"userNamePasswordJson"`

	/* validate blueprint
	 */
	ValidateBlueprint *bool `json:"validateBlueprint,omitempty"`
}

// Validate validates this update cluster
func (m *UpdateCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostGroupAdjustment(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHostgroups(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserNamePasswordJSON(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateCluster) validateHostGroupAdjustment(formats strfmt.Registry) error {

	if m.HostGroupAdjustment != nil {

		if err := m.HostGroupAdjustment.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *UpdateCluster) validateHostgroups(formats strfmt.Registry) error {

	if swag.IsZero(m.Hostgroups) { // not required
		return nil
	}

	if err := validate.UniqueItems("hostgroups", "body", m.Hostgroups); err != nil {
		return err
	}

	for i := 0; i < len(m.Hostgroups); i++ {

		if m.Hostgroups[i] != nil {

			if err := m.Hostgroups[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

var updateClusterTypeStatusPropEnum []interface{}

func (m *UpdateCluster) validateStatusEnum(path, location string, value string) error {
	if updateClusterTypeStatusPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["SYNC","FULL_SYNC","STOPPED","STARTED"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			updateClusterTypeStatusPropEnum = append(updateClusterTypeStatusPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, updateClusterTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UpdateCluster) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", string(*m.Status)); err != nil {
		return err
	}

	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *UpdateCluster) validateUserNamePasswordJSON(formats strfmt.Registry) error {

	if m.UserNamePasswordJSON != nil {

		if err := m.UserNamePasswordJSON.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
